from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ConversationHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters

# Definici√≥n de estados para el CV Conversacional
CV_MENU, EXPERIENCE, SKILLS, EDUCATION, CONTACT = range(5)
END = -1

async def start_cv_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Punto de entrada. Muestra el men√∫ principal del CV."""
    keyboard = [
        [InlineKeyboardButton("üöÄ Trayectoria y Logros", callback_data="cv_exp")],
        [InlineKeyboardButton("üß† Stack Tecnol√≥gico", callback_data="cv_skills")],
        [InlineKeyboardButton("üéì Formaci√≥n", callback_data="cv_edu")],
        [InlineKeyboardButton("üí¨ Contacto Directo", callback_data="cv_contact")],
        [InlineKeyboardButton("‚¨ÖÔ∏è Volver al Men√∫ Principal", callback_data="cv_exit")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            "¬°Bienvenido a mi perfil interactivo! üëã ¬øQu√© √°rea de mi experiencia profesional le gustar√≠a profundizar?", 
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            "¬°Bienvenido a mi perfil interactivo! üëã ¬øQu√© √°rea de mi experiencia profesional le gustar√≠a profundizar?", 
            reply_markup=reply_markup
        )
    return CV_MENU

async def cv_menu_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Maneja la selecci√≥n del men√∫ del CV."""
    query = update.callback_query
    await query.answer()

    if query.data == "cv_exp":
        await query.edit_message_text(
            text=("üöÄ **Trayectoria: Consultor√≠a y Optimizaci√≥n de Procesos**\n\n"
                  "**01/2023 - Hoy | Analista de Procesos y Herramientas**\n"
                  "üìà **Impacto en el Negocio:** Liderazgo en el **dise√±o y automatizaci√≥n** de procesos que resultaron en una mejora de la **eficiencia operativa**.\n"
                  "üí° **Innovaci√≥n:** Implementaci√≥n estrat√©gica de soluciones de **Business Intelligence (BI)**, transformando datos brutos en inteligencia de negocio.\n"
                  "üîó **Coordinaci√≥n:** Gesti√≥n y optimizaci√≥n avanzada de plataformas **Jira y Confluence** para asegurar la trazabilidad y la entrega puntual de proyectos.\n\n"
                  "**2018 - 2022 | Soporte y Monitoreo Estrat√©gico**\n"
                  "üõ°Ô∏è **Resiliencia:** Experticia en **Nagios y Pandora FMS** para garantizar un **uptime** cercano al 100% de la infraestructura cr√≠tica.\n"
                  "‚òÅÔ∏è **Arquitectura:** Configuraci√≥n y optimizaci√≥n de **servidores Linux**, reduciendo la latencia y los costos de mantenimiento."),
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Volver al Men√∫ CV", callback_data="cv_back")]])
        )
        return EXPERIENCE

    elif query.data == "cv_skills":
        await query.edit_message_text(
            text=("üß† **Stack Tecnol√≥gico: El Conjunto de Herramientas del Consultor**\n\n"
                  "**AN√ÅLISIS Y PYTHON:** \n"
                  "‚Ä¢ **Python:** Desarrollo de scripts para ETL, automatizaci√≥n de tareas y an√°lisis predictivo inicial.\n"
                  "‚Ä¢ **SQL:** Consultas complejas y dise√±o de modelos de datos para reporting.\n\n"
                  "**VISUALIZACI√ìN Y BI:** \n"
                  "‚Ä¢ **Power BI / Power Platform:** Creaci√≥n de paneles din√°micos y soluciones de BI *end-to-end* para ejecutivos.\n\n"
                  "**PLATAFORMAS Y FLUJOS DE TRABAJO:** \n"
                  "‚Ä¢ **Jira (Admin):** Configuraci√≥n de flujos de trabajo personalizados y automatizaciones que optimizan el ciclo de vida del ticket.\n"
                  "‚Ä¢ **Office 365** (0365): Integraci√≥n de ecosistemas de trabajo colaborativo.\n\n"
                  "**COMPETENCIAS CLAVE:** **Orientaci√≥n a Resultados**, Comunicaci√≥n de Impacto (traducir lo t√©cnico a lenguaje de negocio) y Planificaci√≥n Rigurosa."),
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Volver al Men√∫ CV", callback_data="cv_back")]])
        )
        return SKILLS
        
    elif query.data == "cv_edu":
        await query.edit_message_text(
            text=("üéì **Formaci√≥n Acad√©mica: La Base Anal√≠tica y T√©cnica**\n\n"
                  "Mi educaci√≥n formal respalda mi capacidad para abordar desaf√≠os de sistemas complejos y an√°lisis de datos.\n\n"
                  "**T√©cnico Superior en An√°lisis de Sistemas** (IFTS N¬∞ 12, 2015-2016).\n"
                  "**T√©cnico en Computaci√≥n** (Hogar Naval Stella Maris N¬∞37 D.E. N¬∞11, 1996-2001).\n\n"
                  "Me especializo en la **intersecci√≥n entre IT y Estrategia de Negocio**."),
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Volver al Men√∫ CV", callback_data="cv_back")]])
        )
        return EDUCATION

    elif query.data == "cv_contact":
        await query.edit_message_text(
            text=("üí¨ **¬°Conectemos! Hablemos de su pr√≥ximo proyecto:**\n\n"
                  "Si mi experiencia en optimizaci√≥n, BI y gesti√≥n de plataformas se alinea con sus necesidades, no dude en contactarme. Estoy listo para discutir c√≥mo puedo aportar valor a su equipo.\n\n"
                  "üìß **Email:** pablo.pallitto@gmail.com\n"
                  "üìû **Tel√©fono:** (54) 9 11 2251-2731\n"
                  "üîó **LinkedIn:** www.linkedin.com/in/pablo-pallitto\n"
                  "üåê **Portafolio:** curriculumvitae.pablopallitto.ar"),
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Volver al Men√∫ CV", callback_data="cv_back")]])
        )
        return CONTACT
    
    elif query.data == "cv_back":
        await start_cv_menu(update, context) 
        return CV_MENU

    elif query.data == "cv_exit":
        await query.edit_message_text(text="¬°Gracias por tu inter√©s en mi perfil! Volviendo al men√∫ principal...")
        return END 

    return CV_MENU

# CONVERSATION HANDLER EXPORTADO
# El entry point se define como un MessageHandler para iniciar desde un bot√≥n de texto
cv_conversation_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^(üìÑ Explorar mi CV)$"), start_cv_menu)],
    states={
        CV_MENU: [CallbackQueryHandler(cv_menu_selection, pattern=r'cv_.*')],
        EXPERIENCE: [CallbackQueryHandler(cv_menu_selection, pattern=r'cv_.*')],
        SKILLS: [CallbackQueryHandler(cv_menu_selection, pattern=r'cv_.*')],
        EDUCATION: [CallbackQueryHandler(cv_menu_selection, pattern=r'cv_.*')],
        CONTACT: [CallbackQueryHandler(cv_menu_selection, pattern=r'cv_.*')]
    },
    fallbacks=[CallbackQueryHandler(cv_menu_selection, pattern="^cv_exit$")],
    map_to_parent={END: ConversationHandler.END}
)