import os
import logging
from dotenv import load_dotenv 
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
from simulated_data import get_jira_status

# Configuraci칩n b치sica del logging para ver errores en la terminal
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# --- 1. DEFINICI칍N DE HANDLERS (Funciones que responden) ---

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Responde al comando /start con un saludo y el men칰 principal."""
    user = update.effective_user.first_name if update.effective_user else "Estimado Usuario"
    
    # Define los botones del men칰 
    keyboard = [
        [KeyboardButton("游늵 An치lisis de Datos")],
        [KeyboardButton("丘뙖잺 Admin. de Plataformas")],
        [KeyboardButton("九괦잺 Solicitar Consultor칤a (/contacto)")]
    ]
    # resize_keyboard=True ajusta el tama침o, one_time_keyboard=False lo mantiene
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    
    welcome_message = (
        f"춰Hola {user}! Soy tu Asistente de Consultor칤a en Data y Gesti칩n.\n\n"
        "Selecciona una opci칩n para comenzar a explorar mis servicios y experiencia."
    )
    
    await update.message.reply_text(welcome_message, reply_markup=reply_markup)

async def contacto_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Informaci칩n de contacto (o inicio del formulario de leads)."""
    message = (
        "춰Excelente! Para una consulta detallada, cont치ctame directamente.\n\n"
        "游댕 **LinkedIn:** [Pega tu Enlace de LinkedIn aqu칤]\n"
        "游닎 **Email:** tu.email@ejemplo.com\n\n"
        "*(Pronto implementaremos un formulario guiado aqu칤 para capturar tu solicitud)*"
    )
    await update.message.reply_text(message)

async def handle_text_messages(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Maneja los mensajes de texto que no son comandos, incluyendo los de los botones."""
    text = update.message.text
    response = ""
    
    if text == "游늵 An치lisis de Datos":
        response = (
            "M칩dulo de An치lisis de Datos seleccionado.\n\n"
            "Mis herramientas clave: **Power BI**, **Excel** (avanzado), **SQL** y **Python**.\n\n"
            "Pronto: Podr치s probar mi simulador de consultas SQL/Python."
        )
    elif text == "丘뙖잺 Admin. de Plataformas":
        response = (
            "M칩dulo de Administraci칩n seleccionado.\n\n"
            "Mis herramientas clave: **Jira**, **HubSpot**, **Teamwork** y sus APIs.\n\n"
            "Pronto: Podr치s consultar el estado de tickets/contactos simulados."
        )
    elif "Solicitar Consultor칤a" in text:
        # Si hacen clic en el bot칩n de contacto, llamamos a la funci칩n
        await contacto_command(update, context)
        return
    else:
        # Respuesta por defecto para texto que no se reconoce
        response = "Lo siento, no entend칤 ese mensaje. Usa /start para ver el men칰 principal."

    await update.message.reply_text(response)


# --- 2. FUNCI칍N PRINCIPAL (MAIN) ---

def main() -> None:
    """Configura y ejecuta el bot."""
    
    # 1. Carga las variables de entorno desde el archivo .env
    load_dotenv() 
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    
    if not token:
        print("\nERROR CR칈TICO: La variable de entorno TELEGRAM_BOT_TOKEN no se encontr칩.")
        print("Aseg칰rate de haber creado el archivo .env y haber pegado el token ah칤.")
        return

    # 2. Crea la aplicaci칩n
    application = Application.builder().token(token).build() 

    # 3. Asocia los handlers (Comandos y Mensajes)
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("contacto", contacto_command))
    
    # Escucha cualquier mensaje de texto que NO sea un comando (/start, /contacto, etc.)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_messages))

    # 4. Inicia el bot (Modo Long Polling para desarrollo local)
    print("Bot Iniciado. Buscando actualizaciones... (Ctrl+C para detener)")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()